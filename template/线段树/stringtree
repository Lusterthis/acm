#include <iostream>
#include <vector> // 使用vector替代原生数组以提高安全性
using namespace std;

const int MAXN = 1000001; // 定义最大数组长度
typedef long long ll;     // 类型别名简化代码

// 线段树节点结构体，提高代码可读性
struct SegmentTree {
    vector<ll> ans; // 存储线段树节点值
    vector<ll> tag; // 懒标记数组
    int n;          // 原始数组长度

    // 构造函数，初始化线段树
    SegmentTree(int size) : n(size) {
        ans.resize(size << 2); // 四倍空间
        tag.resize(size << 2);
    }

    inline int ls(int x) { return x << 1; }     // 左子节点索引
    inline int rs(int x) { return x << 1 | 1; } // 右子节点索引

    // 合并子节点结果
    void push_up(int p) {
        ans[p] = ans[ls(p)] + ans[rs(p)];
    }

    // 构建线段树
    void build(int p, int l, int r, vector<ll>& arr) {
        tag[p] = 0;
        if (l == r) {
            ans[p] = arr[l];
            return;
        }
        int mid = (l + r) >> 1;
        build(ls(p), l, mid, arr);
        build(rs(p), mid + 1, r, arr);
        push_up(p);
    }

    // 应用懒标记
    void apply(int p, int l, int r, ll k) {
        tag[p] += k;
        ans[p] += k * (r - l + 1);
    }

    // 下推懒标记
    void push_down(int p, int l, int r) {
        int mid = (l + r) >> 1;
        apply(ls(p), l, mid, tag[p]);
        apply(rs(p), mid + 1, r, tag[p]);
        tag[p] = 0;
    }

    // 区间更新
    void update(int nl, int nr, int l, int r, int p, ll k) {
        if (nl <= l && r <= nr) {
            apply(p, l, r, k);
            return;
        }
        push_down(p, l, r);
        int mid = (l + r) >> 1;
        if (nl <= mid) update(nl, nr, l, mid, ls(p), k);
        if (nr > mid) update(nl, nr, mid + 1, r, rs(p), k);
        push_up(p);
    }

    // 区间查询
    ll query(int ql, int qr, int l, int r, int p) {
        if (ql <= l && r <= qr) return ans[p];
        ll res = 0;
        push_down(p, l, r);
        int mid = (l + r) >> 1;
        if (ql <= mid) res += query(ql, qr, l, mid, ls(p));
        if (qr > mid) res += query(ql, qr, mid + 1, r, rs(p));
        return res;
    }
};

int main() {
    ios::sync_with_stdio(false); // 关闭同步，提高输入输出效率
    cin.tie(nullptr);            // 解除cin与cout的绑定

    int n, m;
    cin >> n >> m;
    vector<ll> a(n + 1); // 使用vector存储原始数组
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
    }

    SegmentTree st(n);    // 创建线段树实例
    st.build(1, 1, n, a); // 构建线段树

    while (m--) {
        int op;
        cin >> op;
        if (op == 1) {   // 区间更新操作
            int l, r;
            ll val;
            cin >> l >> r >> val;
            st.update(l, r, 1, n, 1, val);
        } else if (op == 2) { // 区间查询操作
            int l, r;
            cin >> l >> r;
            cout << st.query(l, r, 1, n, 1) << '\n';
        }
    }
    return 0;
}